;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;int Timer0 = 0, Timer2 = 0, counter = 0;
;// Timer 0 overflow interrupt service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0008 // Place your code here
; 0000 0009 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 000A TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (1<<CS21) | (1<<CS20);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000B TCNT0=0xC2;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 000C TCNT2=0x83;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 000D counter = 0;
;PCODE: $00000017 VOL: 0
; 0000 000E }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0011 {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0012 TCNT0=0xC2;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0013     if(256 <= Timer0)
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0014     {
; 0000 0015        Timer0 = 0;
;PCODE: $00000022 VOL: 0
; 0000 0016        PORTC.0 =~ PORTC.0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0017        ++counter;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0018        if(counter > 1)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0019        {
; 0000 001A             TCCR0 = 0;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 001B             TCCR2 = 0;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 001C        }
; 0000 001D     }
;PCODE: $00000037 VOL: 0
; 0000 001E     ++Timer0;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 001F }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0023 {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0024 TCNT2=0x83;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0025     if(128 <= Timer2)
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0026         {
; 0000 0027            PORTC.0 =~ PORTC.0;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0028            Timer2 = 0;
;PCODE: $00000050 VOL: 0
; 0000 0029         }
; 0000 002A     ++Timer2;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 002B }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;
;void main(void)
; 0000 002E {
;PCODE: $00000058 VOL: 0
; 0000 002F 
; 0000 0030 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0031 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0032 
; 0000 0033 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0034 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0035 
; 0000 0036 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0037 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (1<<PORTC0);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0038 
; 0000 0039 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 003A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 003B 
; 0000 003C // Timer/Counter 0 initialization
; 0000 003D // Clock source: System Clock
; 0000 003E // Clock value: 15/625 kHz
; 0000 003F // Mode: Normal top=0xFF
; 0000 0040 // OC0 output: Disconnected
; 0000 0041 // Timer Period: 3/968 ms
; 0000 0042 TCNT0=0xC2;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0043 OCR0=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0044 
; 0000 0045 // Timer/Counter 2 initialization
; 0000 0046 // Clock source: System Clock
; 0000 0047 // Clock value: 31/250 kHz
; 0000 0048 // Mode: Normal top=0xFF
; 0000 0049 // OC2 output: Disconnected
; 0000 004A // Timer Period: 4 ms
; 0000 004B ASSR=0<<AS2;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 004C TCNT2=0x83;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 004D OCR2=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 004E 
; 0000 004F // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0050 TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0051 
; 0000 0052 GICR|=(1<<INT1) | (0<<INT0) | (0<<INT2);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0053 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0054 MCUCSR=(0<<ISC2);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0055 GIFR=(1<<INTF1) | (0<<INTF0) | (0<<INTF2);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0056 
; 0000 0057 // Global enable interrupts
; 0000 0058 #asm("sei")
;PCODE: $0000007E VOL: 0
	sei
;PCODE: $0000007F VOL: 0
; 0000 0059 
; 0000 005A while (1)
;PCODE: $00000080 VOL: 0
; 0000 005B       {
; 0000 005C       // Place your code here
; 0000 005D 
; 0000 005E       }
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 005F }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
